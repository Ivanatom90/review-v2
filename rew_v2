#include <algorithm>
#include <iostream>
#include <string>
#include <sstream>
#include <string_view>
#include <vector>

using namespace std;




class Domain {
public:
    Domain(string domain):domain_(domain){}

    bool IsSubdomain(const Domain& domain) const{
        if (domain.domain_.size()<domain_.size()){
            return false;
        }
        const string subdomen = domain.domain_.substr(0, domain_.size());
        if(domain_ == subdomen){
            return true;
        }
        return false;
    }

    bool operator==(const Domain& domain) const{
        return domain_ == domain.domain_;
    }

    bool operator<(const Domain& domain) const{
        return domain_ < domain.domain_;
    }

    bool operator>(const Domain& domain) const{
        return domain_ > domain.domain_;
    }

    void GetDomain() const{
        cout<<domain_<<endl;
    }

private:
    string domain_;
    // разработайте класс домена

    // конструктор должен позволять конструирование из string, с сигнатурой определитесь сами

    // разработайте operator==

    // разработайте метод IsSubdomain, принимающий другой домен и возвращающий true, если this его поддомен
};

class DomainChecker {
public:
    template <typename InputIt>
    DomainChecker(InputIt It_begin, InputIt It_end): blocked_domains_(It_begin, It_end){
        SortBlokedDomens();
        EraseSubDomains();
    }

    bool IsForbidden(const Domain& domain) {

        auto next_domen = upper_bound(blocked_domains_.begin(), blocked_domains_.end(), domain);
        if(next_domen == blocked_domains_.begin()){
            return false;
        }
        bool forbidden = (next_domen-1)->IsSubdomain(domain);
        return forbidden;

    }

private:
    vector<Domain> blocked_domains_;

    void SortBlokedDomens(){
        sort(blocked_domains_.begin(), blocked_domains_.end());
    }

    void EraseSubDomains(){
        auto last_element = unique(blocked_domains_.begin(), blocked_domains_.end(), [](const Domain d1, const Domain d2){
            return d1.IsSubdomain(d2);
        });

        blocked_domains_.erase(last_element, blocked_domains_.end());
    }
    // конструктор должен принимать список запрещённых доменов через пару итераторов

    // разработайте метод IsForbidden, возвращающий true, если домен запрещён
};

// разработайте функцию ReadDomains, читающую заданное количество доменов из стандартного входа

template <typename Number>
Number ReadNumberOnLine(istream& input) {
    string line;
    getline(input, line);

    Number num;
    std::istringstream(line) >> num;

    return num;
}

std::vector<Domain> ReadDomains(istream& input, int domains_number){
    vector<Domain> result;
    string str;
    for(int i = 0; i<domains_number; i++){
        getline(input, str);
        string str_reverse = "";
        for(int j = str.size()-1; j>-1; j--){
            str_reverse += str[j];
        }
        str_reverse += ".";
        result.push_back(Domain(str_reverse));
    }

    return result;


}

int main() {
    const std::vector<Domain> forbidden_domains = ReadDomains(cin, ReadNumberOnLine<size_t>(cin));
    DomainChecker checker(forbidden_domains.begin(), forbidden_domains.end());

    const std::vector<Domain> test_domains = ReadDomains(cin, ReadNumberOnLine<size_t>(cin));
    for (const Domain& domain : test_domains) {
        //domain.GetDomain();
        cout << (checker.IsForbidden(domain) ? "Bad"sv : "Good"sv) << endl;
    }
}
